Test-pad Questions ADS
                                                                               Ways to cover a distance
int totalWaysToDistance(int d, int k){
    vector<int> dp(d + 1, 0);
    dp[0] = 1; // base case

    for (int i = 1; i <= d; ++i) {
        for (int j = 1; j <= k; ++j) {
            if (i - j >= 0) {
                dp[i] += dp[i - j];
            }
        }
    }

    return dp[d];
}

                                                                    Minimum Cost Path to the last element of the matrix
#include <iostream>
#include <vector>
#include <algorithm>
using namespace std;

int minCostPath(vector<vector<int>> &cost, int m, int n) {
    vector<vector<int>> dp(m, vector<int>(n));
    
    dp[0][0] = cost[0][0];
    
    // Initialize first column
    for(int i = 1; i < m; i++)
        dp[i][0] = dp[i-1][0] + cost[i][0];
    
    // Initialize first row
    for(int j = 1; j < n; j++)
        dp[0][j] = dp[0][j-1] + cost[0][j];
    
    // Fill the rest of dp matrix
    for(int i = 1; i < m; i++) {
        for(int j = 1; j < n; j++) {
            dp[i][j] = cost[i][j] + min({
                dp[i-1][j],      // top
                dp[i][j-1],      // left
                dp[i-1][j-1]     // diagonal
            });
        }
    }
    
    return dp[m-1][n-1];
}

int main() {
    int m, n;
    cin >> m >> n;
    
    vector<vector<int>> cost(m, vector<int>(n));
    
    for(int i = 0; i < m; i++)
        for(int j = 0; j < n; j++)
            cin >> cost[i][j];
    
    cout << minCostPath(cost, m, n) << endl;
    return 0;
}
                                                                                        Subset Sum Problem
#include <iostream>
using namespace std;

int subsetSum(int a[], int n, int sum) {
    bool dp[n+1][sum+1];

    // Initialize dp table
    for(int i = 0; i <= n; i++)
        dp[i][0] = true;  // sum 0 is always possible

    for(int j = 1; j <= sum; j++)
        dp[0][j] = false; // no element can't make non-zero sum

    // Fill the dp table
    for(int i = 1; i <= n; i++) {
        for(int j = 1; j <= sum; j++) {
            if(a[i-1] <= j)
                dp[i][j] = dp[i-1][j] || dp[i-1][j - a[i-1]];
            else
                dp[i][j] = dp[i-1][j];
        }
    }

    return dp[n][sum] ? 1 : 0;
}

int main() {
    int sum, n;
    cin >> sum;
    cin >> n;
    int a[n];

    for(int i = 0; i < n; i++)
        cin >> a[i];

    cout << subsetSum(a, n, sum) << endl;
    return 0;
}
                                                                                         0/1 Knapsack Problem
#include <iostream>
#include <vector>
#include <algorithm>
using namespace std;

int zeroOneKnapsack(int val[], int weight[], int n, int capacity) {
    vector<vector<int>> dp(n+1, vector<int>(capacity+1, 0));

    for (int i = 1; i <= n; i++) {
        for (int w = 1; w <= capacity; w++) {
            if (weight[i-1] <= w) {
                dp[i][w] = max(
                    val[i-1] + dp[i-1][w - weight[i-1]],
                    dp[i-1][w]
                );
            } else {
                dp[i][w] = dp[i-1][w];
            }
        }
    }

    return dp[n][capacity];
}

int main() {
    int n;
    cin >> n;

    int val[n], weight[n];

    for(int i = 0; i < n; i++)
        cin >> val[i];

    for(int i = 0; i < n; i++)
        cin >> weight[i];

    int capacity;
    cin >> capacity;

    cout << zeroOneKnapsack(val, weight, n, capacity) << endl;
    return 0;
}

